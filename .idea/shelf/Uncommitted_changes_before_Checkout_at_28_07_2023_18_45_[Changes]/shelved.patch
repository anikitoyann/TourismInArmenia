Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>3.0.6</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.example</groupId>\r\n    <artifactId>TourismInArmenia</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>TourismInArmenia</name>\r\n    <description>TourismInArmenia</description>\r\n    <properties>\r\n        <java.version>17</java.version>\r\n    </properties>\r\n\r\n    <packaging>pom</packaging>\r\n    <modules>\r\n        <module>tourArmenia-common</module>\r\n        <module>tourArmenia-web</module>\r\n        <module>tourArmenia-rest</module>\r\n    </modules>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-security</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.mysql</groupId>\r\n            <artifactId>mysql-connector-j</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <excludes>\r\n                        <exclude>\r\n                            <groupId>org.projectlombok</groupId>\r\n                            <artifactId>lombok</artifactId>\r\n                        </exclude>\r\n                    </excludes>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 7f580144f164f26c4f0891fe98bae0b6f8931214)
+++ b/pom.xml	(date 1690553796177)
@@ -6,7 +6,6 @@
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-parent</artifactId>
         <version>3.0.6</version>
-        <relativePath/> <!-- lookup parent from repository -->
     </parent>
     <groupId>com.example</groupId>
     <artifactId>TourismInArmenia</artifactId>
Index: tourArmenia-common/src/main/java/com/example/tourarmeniacommon/service/serviceImpl/ItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.tourarmeniacommon.service.serviceImpl;\r\n\r\nimport com.example.tourarmeniacommon.dto.ItemDto;\r\nimport com.example.tourarmeniacommon.dto.ItemSearchDto;\r\nimport com.example.tourarmeniacommon.entity.Item;\r\nimport com.example.tourarmeniacommon.entity.QItem;\r\nimport com.example.tourarmeniacommon.entity.Region;\r\nimport com.example.tourarmeniacommon.entity.Type;\r\nimport com.example.tourarmeniacommon.mapper.ItemMapper;\r\nimport com.example.tourarmeniacommon.repository.ItemRepository;\r\nimport com.example.tourarmeniacommon.service.ItemService;\r\nimport com.querydsl.core.types.Order;\r\nimport com.querydsl.core.types.OrderSpecifier;\r\nimport com.querydsl.core.types.dsl.PathBuilder;\r\nimport com.querydsl.jpa.impl.JPAQuery;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport jakarta.persistence.PersistenceContext;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class ItemServiceImpl implements ItemService {\r\n    public final ItemRepository itemRepository;\r\n    private final ItemMapper itemMapper;\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n    @Value(\"${upload.image.path}\")\r\n    private String imageUploadPath;\r\n\r\n    //adds an Item object to the item repository along with an associated image file, if provided.\r\n    public void addItem(MultipartFile multipartFile, Item item) throws IOException {\r\n        if (multipartFile != null && !multipartFile.isEmpty()) {\r\n            String fileName = System.nanoTime() + \"_\" + multipartFile.getOriginalFilename();\r\n            File file = new File(imageUploadPath + fileName);\r\n            multipartFile.transferTo(file);\r\n            item.setPicName(fileName);\r\n        }\r\n        itemRepository.save(item);\r\n    }\r\n\r\n    // Retrieves an Item object from the item repository based on the provided item ID.\r\n    @Override\r\n    public Optional<Item> findById(int id) {\r\n        log.debug(\"Searching for Item with id: {}\", id);\r\n        Optional<Item> byId = itemRepository.findById(id);\r\n        if (byId.isEmpty()) {\r\n            log.error(\"Item with id {} does not exist.\", id);\r\n            throw new EntityNotFoundException(\"Item with \" + id + \" id does not exists.\");\r\n        }\r\n        log.debug(\"Found Item with id {}: {}\", id, byId.get());\r\n        return Optional.of(byId.get());\r\n    }\r\n\r\n    // Retrieves a paginated list of Item objects from the item repository that match the specified Type.\r\n    @Override\r\n    public Page<Item> findAllByType(Type type, Pageable pageable) {\r\n        return itemRepository.findAllByType(type,pageable);\r\n    }\r\n\r\n    // Retrieves a paginated list of Item objects from the item repository that belong to a specific Region and match the specified Type.\r\n    public Page<Item> findAllByRegionAndType(Pageable pageable, int regionId, Type type){\r\n        return itemRepository.findAllByRegion_IdAndType(pageable, regionId,type);\r\n    }\r\n\r\n    //Saves an Item object to the item repository.\r\n    @Override\r\n    public Item save(Item item) {\r\n        return itemRepository.save(item);\r\n    }\r\n\r\n    //Checks if an Item with the specified ID exists in the item repository.\r\n    @Override\r\n    public boolean existsById(int id) {\r\n      return itemRepository.existsById(id);\r\n    }\r\n\r\n    //Performs a search for items based on the provided search criteria and pagination parameters.\r\n    //The method fetches items that match the search criteria from the database and returns a list of ItemDto objects\r\n    //representing the search results.\r\n    @Override\r\n    public List<ItemDto> search(int page, int size, ItemSearchDto itemSearchDto) {\r\n        List<Item> fetch = searchItemByFilter(page, size, itemSearchDto);\r\n        List<ItemDto> itemDtos = itemMapper.mapListToDtos(fetch);\r\n        return itemDtos;\r\n    }\r\n\r\n    //Retrieves a paginated list of Item entities.\r\n    @Override\r\n    public Page<Item> findAllByPageable(Pageable pageable) {\r\n        return itemRepository.findAll(pageable);\r\n    }\r\n\r\n    //Deletes an Item entity with the specified ID.\r\n    @Override\r\n    public void deleteById(int id) {\r\n        itemRepository.deleteById(id);\r\n    }\r\n\r\n    //Retrieves a list of all Item entities in the database.\r\n    @Override\r\n    public List<Item> findAll() {\r\n        return itemRepository.findAll();\r\n    }\r\n\r\n    //Retrieves a list of Item entities associated with the specified Region.\r\n    @Override\r\n    public List<Item> findByRegion(Region region) {\r\n        return itemRepository.findByRegion(region);\r\n    }\r\n\r\n    // Searches for Item entities based on filtering criteria provided in the ItemSearchDto object.\r\n  private List<Item> searchItemByFilter(int page, int size, ItemSearchDto itemSearchDto) {\r\n       QItem qItem = QItem.item;\r\n        var query = new JPAQuery<Item>(entityManager);\r\n        JPAQuery<Item> from = query.from(qItem);\r\n        if (itemSearchDto.getDescription() != null && !itemSearchDto.getDescription().isEmpty()) {\r\n            from.where(qItem.description.contains(itemSearchDto.getDescription()));\r\n        }\r\n        if (itemSearchDto.getName() != null && itemSearchDto.getName().isEmpty()) {\r\n            from.where(qItem.name.contains(itemSearchDto.getName()));\r\n        }\r\n        if (itemSearchDto.getRegionName() != null && itemSearchDto.getRegionName().isEmpty()) {\r\n            from.where(qItem.region.name.contains(itemSearchDto.getRegionName()));\r\n        }\r\n        if (itemSearchDto.getType() != null) {\r\n            from.where(qItem.type.eq(itemSearchDto.getType()));\r\n        }\r\n        if (page > 0) {\r\n            from.offset((long) page * size) ;\r\n        }\r\n        from.limit(size);\r\n        PathBuilder<Object> objectPathBuilder = new PathBuilder<Object>(Item.class, itemSearchDto.getSortBy());\r\n        from.orderBy(new OrderSpecifier(\"asc\".equalsIgnoreCase(itemSearchDto.getSortDirection()) ? Order.ASC\r\n                : Order.DESC, objectPathBuilder));\r\n        List<Item> fetch = from.fetch();\r\n        return fetch;\r\n    }\r\n\r\n    //Updates the properties of an existing Item with the values from the provided Item object.\r\n    public Item updateItem(Item item, Optional<Item> byId) {\r\n        Item itemDB = byId.get();\r\n        if (item.getName() != null && !item.getName().isEmpty()) {\r\n            itemDB.setName(item.getName());\r\n        }\r\n        if (item.getDescription() != null && !item.getDescription().isEmpty()) {\r\n            itemDB.setDescription(item.getDescription());\r\n            log.info(\"Description updated to: {}\", item.getDescription());\r\n        }\r\n        if (item.getRegion() != null) {\r\n            itemDB.setRegion(item.getRegion());\r\n            log.info(\"Region updated to: {}\", item.getRegion());\r\n        }\r\n        if (item.getType() != null) {\r\n            itemDB.setType(item.getType());\r\n            log.info(\"Type updated to: {}\", item.getType());\r\n        }\r\n        log.info(\"Updated item: {}\", itemDB);\r\n        return itemDB;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tourArmenia-common/src/main/java/com/example/tourarmeniacommon/service/serviceImpl/ItemServiceImpl.java b/tourArmenia-common/src/main/java/com/example/tourarmeniacommon/service/serviceImpl/ItemServiceImpl.java
--- a/tourArmenia-common/src/main/java/com/example/tourarmeniacommon/service/serviceImpl/ItemServiceImpl.java	(revision 7f580144f164f26c4f0891fe98bae0b6f8931214)
+++ b/tourArmenia-common/src/main/java/com/example/tourarmeniacommon/service/serviceImpl/ItemServiceImpl.java	(date 1690554476602)
@@ -1,9 +1,7 @@
 package com.example.tourarmeniacommon.service.serviceImpl;
-
 import com.example.tourarmeniacommon.dto.ItemDto;
 import com.example.tourarmeniacommon.dto.ItemSearchDto;
 import com.example.tourarmeniacommon.entity.Item;
-import com.example.tourarmeniacommon.entity.QItem;
 import com.example.tourarmeniacommon.entity.Region;
 import com.example.tourarmeniacommon.entity.Type;
 import com.example.tourarmeniacommon.mapper.ItemMapper;
